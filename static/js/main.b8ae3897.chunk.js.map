{"version":3,"sources":["components/Button.js","components/Square.js","components/Board.js","components/Game.js","index.js"],"names":["Button","props","className","onClick","value","Square","Board","renderSquare","i","squares","this","React","Component","calculateWinner","lines","length","a","b","c","Game","showMove","setState","displayMove","state","restartGame","history","stepNumber","xisNext","computerTurn","jumpTo","step","changeMode","computerMode","computerMove","slice","winner","randomNum","results","Math","floor","random","getRandNum","concat","handleClick","status","current","moves","map","move","desc","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8ae3897.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Button = (props)=>{\n  return(\n      <button className = {props.className}\n            onClick = {props.onClick}\n      >\n        {props.value}\n      </button>\n  );\n}\n\nexport default Button;","import React from 'react';\nimport Button from './Button';\n\nconst Square = (props)=>{\n    return (\n        <Button className = \"square\"\n                onClick = {props.onClick}\n                value = {props.value}\n        />\n    );\n}\n\nexport default Square;","import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n\n  renderSquare = (i)=>{\n    return (<Square \n              value={this.props.squares[i]}\n              onClick = {()=>{this.props.onClick(i)}}\n            />);\n  }\n\n  render() { \n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;","import React from 'react';\nimport Board from './Board';\nimport Button from './Button';\n\nconst calculateWinner = (squares)=>{\n  const lines = [\n  [0,1,2],\n  [3,4,5],\n  [6,7,8],\n  [0,4,8],\n  [0,3,6],\n  [1,4,7],\n  [2,5,8],\n  [2,4,6]\n  ]\n  for(let i=0; i<lines.length; i++){\n    const [a,b,c] = lines[i];\n    if(squares[a] && squares[a]===squares[b] && squares[a] === squares[c]){\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nclass Game extends React.Component {\n  constructor(props){\n\t    super(props);\n\t    this.state = {\n\t      history:[\n\t        {\n\t          squares: [null,null,null,\n\t                    null,null,null,\n\t                    null,null,null]\n\t        }\n\t      ],\n\t      stepNumber:0,\n\t      xisNext: true,\n\t      displayMove: false,\n\t      computerTurn: false,\n\t      computerMode: false\n\t    };\n  }\n\n  showMove = ()=>{\n  \t\tthis.setState({\n      \t\tdisplayMove: this.state.displayMove?\n                      false : true,\n    })\n  }\n  \n\n  restartGame = ()=>{\n      this.setState({\n        history:[\n        {\n          squares: [null,null,null,\n                    null,null,null,\n                    null,null,null]\n        }\n      ],\n        stepNumber:0,\n        xisNext: true,\n        computerTurn: false,\n       });\n  }\n\n  jumpTo = (step)=>{\n      this.setState({\n        stepNumber: step,\n        xisNext: (step%2)===0\n      })\n  }\n\n  componentDidUpdate(){\n  \tif(this.state.computerMode){\n  \t\tthis.computerMove();\n  \t}\n  }\n\n  changeMode = ()=>{\n  \t\tthis.setState({\n  \t\t\thistory:[\n\t\t        {\n\t\t          squares: [null,null,null,\n\t\t                    null,null,null,\n\t\t                    null,null,null]\n\t\t        }\n\t\t      ],\n\t\t    stepNumber:0,\n\t\t    xisNext: true,\n\t\t    computerMode: !this.state.computerMode,\n\t\t    computerTurn: false,\n\t\t});\n  }\n\n  computerMove = ()=>{\n  \t\tconst computerTurn = this.state.computerTurn;\n  \t\tif(computerTurn && this.state.computerMode){\n\t\t    const history = this.state.history.slice(0, this.state.stepNumber+1);\n\t\t    const current = history[history.length-1];\n\t\t    const squares = current.squares.slice();\n\t\t    const winner = calculateWinner(squares);\n\t\t    // const getRandNum = ()=>{\n\t\t    // \tif(!winner){\n\t\t    // \t\tconst randomNumber = Math.floor(Math.random()*(8-0+1))+0;\n\t\t    // \t\tif(!squares[randomNumber]){\n\t\t    // \t\t\tconsole.log(\"Random Index:\"+randomNumber);\n\t\t    // \t\t\treturn randomNumber;\n\t\t    // \t\t}\n\t\t    // \t\treturn getRandNum();\n\t\t    // \t}\n\t\t    // }\n\t\t //    const getRandNum = () => {\n\t\t\t//     let results = 0;\n\t\t\t//     if (!winner) {\n\t\t\t//         const a = Math.floor(Math.random() * squares.length);\n\t\t\t//         if (squares[a]) {\n\t\t\t//             results = getRandNum();\n\t\t\t//         } else {\n\t\t\t//             results = a\n\t\t\t//         }\n\t\t\t//         return results;\n\t\t\t//     }\n\t\t\t// }\n\t\t\tconst getRandNum = () => {\n\t\t\t    let results = 0;\n\t\t\t    let b = () => results = Math.floor(Math.random() * squares.length+1);\n\t\t\t    if (!winner) {\n\t\t\t        while (squares[results] || results===9) {b()}\n\t\t\t        return results;\n\t\t\t    }\n\t\t\t}\n\t\t    const randomNum = getRandNum();\n\t\t    if(!winner){\n\t\t      squares[randomNum] = this.state.xisNext?\"X\":\"O\";\n\t\t      this.setState({history:history.concat({\n\t\t                        squares: squares\n\t\t                    }),\n\t\t                    stepNumber:history.length,\n\t\t                    xisNext: !this.state.xisNext,\n\t\t                    computerTurn: !computerTurn\n\t\t                  });\n\t\t    }\n  \t\t}\n  }\n\n  handleClick = (i)=>{\n\t  \tconst computerTurn = this.state.computerMode? this.state.computerTurn:false;\n\t  \tif(!computerTurn){\n\t\t    const history = this.state.history.slice(0, this.state.stepNumber+1);\n\t\t    const current = history[history.length-1];\n\t\t    const squares = current.squares.slice();\n\t\t    if(!calculateWinner(squares) && !squares[i]){\n\t\t      squares[i] = this.state.xisNext?\"X\":\"O\";\n\t\t      this.setState({history:history.concat({\n\t\t                        squares: squares\n\t\t                    }),\n\t\t                    stepNumber:history.length,\n\t\t                    xisNext: !this.state.xisNext,\n\t\t                    computerTurn: !computerTurn,\n\t\t                  });\n\t\t    }\n\t\t}\n  }\n\n  render() {\n\t    const history = this.state.history;\n\t    const current = history[this.state.stepNumber];\n\t    const winner = calculateWinner(current.squares);\n\t    let status;\n\t    if(winner){\n\t        status = <span>{winner} is winner!! &#129395; &#x1F389; &#x1F389; &#x1F389;</span>;\n\t    } else if(current.squares.length===this.state.stepNumber){\n\t        status = `Draw`;\n\t    }\n\t    else{\n\t        status = `Next Player: ${this.state.xisNext?\"X\":\"O\"}`;\n\t    }\n\n\t    const moves = history.map((step, move)=>{\n\t                      const desc = move?\n\t                                   move===this.state.stepNumber?`Move #${move}`:\n\t                                   `Go to move #${move}`:\n\t                                   `Go to game start`;\n\t                      return (<li key={move}>\n\t                                  <Button \n\t                                      className = {move===this.state.stepNumber?\n\t                                              \"activeHistoryBtn\":\"historyBtn\"}\n\t                                      onClick = {()=>{this.jumpTo(move)}}\n\t                                      value = {desc}\n\t                                  />\n\t                              </li>);\n\t                  });\n\n\t    return (\n\t      <>\n\t        <h1>Tic-Tac-Toe</h1>\n\t        <div className=\"game\">\n\t          <div className=\"game-board\">\n\t            <Board\n\t                onClick = {(i)=>{this.handleClick(i)}}\n\t                squares = {current.squares} \n\t            />\n\t            <Button className = \"replayBtn\"\n\t                    onClick = {this.restartGame}\n\t                    value = \"Replay\"\n\t            />\n\t            <Button className = \"changeModeBtn\"\n\t          \t\t\t\tonClick = {this.changeMode}\n\t          \t\t\t\tvalue = {!this.state.computerMode?\n\t          \t\t\t\t\t\t\"Computer Mode\":\n\t          \t\t\t\t\t\t\"Multiplayer\"}\n\t          \t/>\n\t          </div>\n\t          <div className=\"game-info\">\n\t            <div className=\"game-status\">{status}</div>\n\t            <Button className = \"showHistoryBtn\"\n\t                    onClick = {this.showMove}\n\t                    value={this.state.displayMove?\n\t                            \"Hide Moves\":\n\t                            \"Show Moves\"}\n\t            />\n\t            <ol className={this.state.displayMove?\n\t                            \"showHistory\":\n\t                            \"hideHistory\"}>\n\t                {moves}\n\t            </ol>\n\t          </div>\n\t          <div className=\"change-mode-container\">\n\t          \t\t\n\t          </div>\n\t        </div>\n\t      </>\n\t    );\n\t  }\n}\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/Game';\nimport './index.css';\n\n\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}